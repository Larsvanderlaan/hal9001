// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "mangolassi_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// dedupe
LogicalVector dedupe(MSpMat X);
RcppExport SEXP mangolassi_dedupe(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(dedupe(X));
    return rcpp_result_gen;
END_RCPP
}
// dedupe_math
LogicalVector dedupe_math(MSpMat X);
RcppExport SEXP mangolassi_dedupe_math(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(dedupe_math(X));
    return rcpp_result_gen;
END_RCPP
}
// col_counts
NumericVector col_counts(MSpMat X);
RcppExport SEXP mangolassi_col_counts(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(col_counts(X));
    return rcpp_result_gen;
END_RCPP
}
// lassi_predict
NumericVector lassi_predict(MSpMat X, NumericVector beta);
RcppExport SEXP mangolassi_lassi_predict(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(lassi_predict(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_coord
void update_coord(MSpMat X, NumericVector resids, NumericVector beta, double lambda, int j);
RcppExport SEXP mangolassi_update_coord(SEXP XSEXP, SEXP residsSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type resids(residsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    update_coord(X, resids, beta, lambda, j);
    return R_NilValue;
END_RCPP
}
// lassi_fit_cd
NumericVector lassi_fit_cd(MSpMat X, NumericVector y, double lambda, int nsteps);
RcppExport SEXP mangolassi_lassi_fit_cd(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP nstepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MSpMat >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    rcpp_result_gen = Rcpp::wrap(lassi_fit_cd(X, y, lambda, nsteps));
    return rcpp_result_gen;
END_RCPP
}
// make_hal_basis
SpMat make_hal_basis(NumericMatrix x);
RcppExport SEXP mangolassi_make_hal_basis(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(make_hal_basis(x));
    return rcpp_result_gen;
END_RCPP
}
// compare_vectors
bool compare_vectors(MatRow v1, MatRow v2);
RcppExport SEXP mangolassi_compare_vectors(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MatRow >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< MatRow >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(compare_vectors(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// make_basis
// generates a basismap with keys the values to test against SpMat make_basis(NumericMatrix X, IntegerVector cols);
RcppExport SEXP mangolassi_make_basis(SEXP XSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(make_basis(X, cols));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"mangolassi_dedupe", (DL_FUNC) &mangolassi_dedupe, 1},
    {"mangolassi_dedupe_math", (DL_FUNC) &mangolassi_dedupe_math, 1},
    {"mangolassi_col_counts", (DL_FUNC) &mangolassi_col_counts, 1},
    {"mangolassi_lassi_predict", (DL_FUNC) &mangolassi_lassi_predict, 2},
    {"mangolassi_update_coord", (DL_FUNC) &mangolassi_update_coord, 5},
    {"mangolassi_lassi_fit_cd", (DL_FUNC) &mangolassi_lassi_fit_cd, 4},
    {"mangolassi_make_hal_basis", (DL_FUNC) &mangolassi_make_hal_basis, 1},
    {"mangolassi_compare_vectors", (DL_FUNC) &mangolassi_compare_vectors, 2},
    {"mangolassi_make_basis", (DL_FUNC) &mangolassi_make_basis, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_mangolassi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
